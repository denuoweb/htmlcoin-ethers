"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addp2pkhVouts = exports.addContractVouts = exports.addVins = exports.generateContractAddress = exports.reverse = exports.contractTxScript = exports.p2pkhScript = exports.p2pkhScriptSig = exports.signp2pkh = exports.encodeSig = exports.toDER = exports.txToBuffer = exports.calcTxBytes = void 0;
const varuint_bitcoin_1 = require("varuint-bitcoin");
const bip66_1 = require("bip66");
const opcodes_1 = require("./helpers/opcodes");
const buffer_cursor_1 = require("./helpers/buffer-cursor");
const secp256k1_1 = require("secp256k1");
const bitcoinjs = require("bitcoinjs-lib");
const script_number_1 = require("bitcoinjs-lib/src/script_number");
const hash_js_1 = require("hash.js");
const toBuffer = require('typedarray-to-buffer');
const bignumber_js_1 = require("bignumber.js");
const utils_1 = require("ethers/lib/utils");
function cloneBuffer(buffer) {
    let result = Buffer.alloc(buffer.length);
    buffer.copy(result);
    return result;
}
function cloneTx(tx) {
    let result = { version: tx.version, locktime: tx.locktime, vins: [], vouts: [] };
    for (let vin of tx.vins) {
        result.vins.push({
            txid: cloneBuffer(vin.txid),
            vout: vin.vout,
            hash: cloneBuffer(vin.hash),
            sequence: vin.sequence,
            script: cloneBuffer(vin.script),
            scriptSig: null
        });
    }
    for (let vout of tx.vouts) {
        result.vouts.push({
            script: cloneBuffer(vout.script),
            value: vout.value,
        });
    }
    return result;
}
function inputBytes(input) {
    var TX_INPUT_BASE = 32 + 4 + 1 + 4;
    // var TX_INPUT_PUBKEYHASH = 107
    return TX_INPUT_BASE + (input.scriptSig ? input.scriptSig.length : input.script.length);
}
function outputBytes(output) {
    var TX_OUTPUT_BASE = 8 + 1;
    var TX_OUTPUT_PUBKEYHASH = 25;
    return TX_OUTPUT_BASE + (output.script ? output.script.length : TX_OUTPUT_PUBKEYHASH);
}
// refer to https://en.bitcoin.it/wiki/Transaction#General_format_of_a_Bitcoin_transaction_.28inside_a_block.29
function calcTxBytes(vins, vouts) {
    const TX_EMPTY_SIZE = 4 + 1 + 1 + 4;
    return TX_EMPTY_SIZE +
        vins.reduce(function (a, x) { return a + inputBytes(x); }, 0) +
        vouts.reduce(function (a, x) { return a + outputBytes(x); }, 0);
}
exports.calcTxBytes = calcTxBytes;
function txToBuffer(tx) {
    let buffer = Buffer.alloc(calcTxBytes(tx.vins, tx.vouts));
    let cursor = new buffer_cursor_1.BufferCursor(buffer);
    // version
    cursor.writeUInt32LE(tx.version);
    // vin length
    cursor.writeBytes(varuint_bitcoin_1.encode(tx.vins.length));
    // vin
    for (let vin of tx.vins) {
        cursor.writeBytes(vin.hash);
        // Issue with using 4, needed 5
        cursor.writeUInt32LE(vin.vout);
        if (vin.scriptSig !== null) {
            cursor.writeBytes(varuint_bitcoin_1.encode(vin.scriptSig.length));
            cursor.writeBytes(vin.scriptSig);
        }
        else {
            cursor.writeBytes(varuint_bitcoin_1.encode(vin.script.length));
            cursor.writeBytes(vin.script);
        }
        cursor.writeUInt32LE(vin.sequence);
    }
    // vout length
    cursor.writeBytes(varuint_bitcoin_1.encode(tx.vouts.length));
    // vouts
    for (let vout of tx.vouts) {
        cursor.writeUInt64LE(vout.value);
        cursor.writeBytes(varuint_bitcoin_1.encode(vout.script.length));
        cursor.writeBytes(vout.script);
    }
    // locktime
    cursor.writeUInt32LE(tx.locktime);
    return buffer;
}
exports.txToBuffer = txToBuffer;
// refer to: https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/src/script_signature.js
function toDER(x) {
    let i = 0;
    while (x[i] === 0)
        ++i;
    if (i === x.length)
        return Buffer.alloc(1);
    x = x.slice(i);
    if (x[0] & 0x80)
        return Buffer.concat([Buffer.alloc(1), x], 1 + x.length);
    return x;
}
exports.toDER = toDER;
// refer to: https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/src/script_signature.js
function encodeSig(signature, hashType) {
    const hashTypeMod = hashType & ~0x80;
    if (hashTypeMod <= 0 || hashTypeMod >= 4)
        throw new Error('Invalid hashType ' + hashType);
    const hashTypeBuffer = Buffer.from([hashType]);
    const bufferSignature = Buffer.from(signature);
    const r = toDER(bufferSignature.slice(0, 32));
    const s = toDER(bufferSignature.slice(32, 64));
    return Buffer.concat([bip66_1.encode(r, s), hashTypeBuffer]);
}
exports.encodeSig = encodeSig;
/////////////////////////////////////////
function signp2pkh(tx, vindex, privKey, hashType = 0x01) {
    let clone = cloneTx(tx);
    // clean up relevant script
    let filteredPrevOutScript = clone.vins[vindex].script.filter((op) => op !== opcodes_1.OPS.OP_CODESEPARATOR);
    // Uint8Array issue here
    clone.vins[vindex].script = toBuffer(filteredPrevOutScript);
    // zero out scripts of other inputs
    for (let i = 0; i < clone.vins.length; i++) {
        console.log(i, vindex);
        if (i === vindex)
            continue;
        clone.vins[i].script = Buffer.alloc(0);
    }
    console.log(clone, 'clone');
    // write to the buffer
    let buffer = txToBuffer(clone);
    // extend and append hash type
    buffer = Buffer.alloc(buffer.length + 4, buffer);
    // append the hash type
    buffer.writeUInt32LE(hashType, buffer.length - 4);
    // double-sha256
    let firstHash = hash_js_1.sha256().update(buffer).digest();
    let secondHash = hash_js_1.sha256().update(firstHash).digest();
    let sig = secp256k1_1.ecdsaSign(new Uint8Array(secondHash), utils_1.arrayify(privKey));
    return encodeSig(sig.signature, hashType);
}
exports.signp2pkh = signp2pkh;
function p2pkhScriptSig(sig, pubkey) {
    return bitcoinjs.script.compile([sig, Buffer.from(pubkey, 'hex')]);
}
exports.p2pkhScriptSig = p2pkhScriptSig;
// Refer to:
// https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/src/payments/p2pkh.js#L58
function p2pkhScript(hash160PubKey) {
    // prettier-ignore
    return bitcoinjs.script.compile([
        opcodes_1.OPS.OP_DUP,
        opcodes_1.OPS.OP_HASH160,
        hash160PubKey,
        opcodes_1.OPS.OP_EQUALVERIFY,
        opcodes_1.OPS.OP_CHECKSIG
    ]);
}
exports.p2pkhScript = p2pkhScript;
function contractTxScript(contractAddress, gasLimit, gasPrice, encodedData) {
    // If contractAddress is missing, assume it's a create script, else assume its a call contract interaction
    if (contractAddress === "") {
        // console.log(bitcoinjs.script.toASM(Buffer.from("010114cca81b02942d8079a871e02ba03a3a4a8d7740d24c8b8a473044022038774a834bc0128366a5aba49e20d3b2774b30404670fd8be00e35794fbdd9a002205edb423e3d612b86c1d4a3c1cf7cf50543e7a8b1083bfc034102e2e2fc882a7c0141040674a4bcaba69378609e31faab1475bae52775da9ffc152e3008f7db2baa69abc1e8c4dcb46083ad56b73614d3eb01f717499c19510544a214f4db4a7c2ea503c4010403a0252601284cf2608060405234801561001057600080fd5b506040516020806100f2833981016040525160005560bf806100336000396000f30060806040526004361060485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166360fe47b18114604d5780636d4ce63c146064575b600080fd5b348015605857600080fd5b5060626004356088565b005b348015606f57600080fd5b506076608d565b60408051918252519081900360200190f35b600055565b600054905600a165627a7a7230582049a087087e1fc6da0b68ca259d45a2e369efcbb50e93f9b7fa3e198de6402b810029c1", "hex")))
        // Issue here with OPS.OP_4 not compiling correctly, when Buffer is casted to string, the first 3 characters should be 010 instead of a 5.
        return bitcoinjs.script.compile([
            opcodes_1.OPS.OP_4,
            script_number_1.encode(gasLimit),
            script_number_1.encode(gasPrice),
            Buffer.from(encodedData, "hex"),
            opcodes_1.OPS.OP_CREATE,
        ]);
    }
    else {
        return bitcoinjs.script.compile([
            opcodes_1.OPS.OP_4,
            script_number_1.encode(gasLimit),
            script_number_1.encode(gasPrice),
            Buffer.from(encodedData, "hex"),
            Buffer.from(contractAddress, "hex"),
            opcodes_1.OPS.OP_CALL,
        ]);
    }
}
exports.contractTxScript = contractTxScript;
function reverse(src) {
    var buffer = Buffer.alloc(src.length);
    for (var i = 0, j = src.length - 1; i <= j; ++i, --j) {
        buffer[i] = src[j];
        buffer[j] = src[i];
    }
    return buffer;
}
exports.reverse = reverse;
function generateContractAddress() {
    // 20 bytes
    // let buffer = Buffer.alloc(32);
    let uintBuff = Buffer.alloc(4);
    uintBuff.writeUInt32LE(0);
    console.log(uintBuff, "uintbff");
    let bufferAlt = Buffer.from("12c42f02875fd777737203ccb186e8e70f97f7ae9fcaba96996b0837a9e44710", "hex");
    console.log(bufferAlt, "ere");
    // bufferAlt.writeUInt32LE(0)
    // return bufferAlt.toString("hex")
    // console.log(bufferAlt.toString("hex"), 'bufferAlt', bufferAlt.length)
    // let cursor = new BufferCursor(buffer);
    // cursor.writeBytes(Buffer.from("12c42f02875fd777737203ccb186e8e70f97f7ae9fcaba96996b0837a9e44710", "hex"));
    // cursor.writeUInt32LE(0);
    // console.log(buffer.toString("hex"), "bufferNorm")
    return Buffer.concat([uintBuff, bufferAlt]).toString("hex");
}
exports.generateContractAddress = generateContractAddress;
//   "txid": "12c42f02875fd777737203ccb186e8e70f97f7ae9fcaba96996b0837a9e44710",
//   "sender": "qcDWPLgdY9pTv3cKLkaMPvqjukURH3Qudy",
//   "hash160": "cca81b02942d8079a871e02ba03a3a4a8d7740d2",
//   "address": "40f1c39b8914c6790145c17ce94476cffbc0eda8"
function addVins(utxos, neededAmount, hash160PubKey) {
    let balance = 0;
    let inputs = [];
    let amounts = [];
    for (let i = 0; i < utxos.length; i++) {
        balance += parseFloat(utxos[i].amount);
        inputs.push({ txid: Buffer.from(utxos[i].txid, 'hex'), vout: utxos[i].vout, hash: reverse(Buffer.from(utxos[i].txid, 'hex')), sequence: 0xffffffff, script: p2pkhScript(Buffer.from(hash160PubKey, "hex")), scriptSig: null });
        amounts.push(parseFloat(utxos[i].amount));
        if (balance >= neededAmount) {
            break;
        }
    }
    return [inputs, amounts];
}
exports.addVins = addVins;
function addContractVouts(gasPrice, gasLimit, data, address, amounts, neededAmount, hash160PubKey) {
    let vouts = [];
    let networkFee = 0.002;
    let returnAmount = amounts.reduce((a, b) => a + b);
    vouts.push({
        script: p2pkhScript(Buffer.from(hash160PubKey, "hex")),
        value: new bignumber_js_1.BigNumber(returnAmount).minus(neededAmount).minus(networkFee).times(1e8).toNumber()
    });
    vouts.push({
        script: contractTxScript(address === "" ? "" : address.split("0x")[1], gasLimit, gasPrice, data.split("0x")[1]),
        // script: Buffer.from("010403a0252601284cf2608060405234801561001057600080fd5b506040516020806100f2833981016040525160005560bf806100336000396000f30060806040526004361060485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166360fe47b18114604d5780636d4ce63c146064575b600080fd5b348015605857600080fd5b5060626004356088565b005b348015606f57600080fd5b506076608d565b60408051918252519081900360200190f35b600055565b600054905600a165627a7a7230582049a087087e1fc6da0b68ca259d45a2e369efcbb50e93f9b7fa3e198de6402b810029c1", "hex"),
        value: 0
    });
    console.log(Buffer.from("010403a0252601284cf2608060405234801561001057600080fd5b506040516020806100f2833981016040525160005560bf806100336000396000f30060806040526004361060485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166360fe47b18114604d5780636d4ce63c146064575b600080fd5b348015605857600080fd5b5060626004356088565b005b348015606f57600080fd5b506076608d565b60408051918252519081900360200190f35b600055565b600054905600a165627a7a7230582049a087087e1fc6da0b68ca259d45a2e369efcbb50e93f9b7fa3e198de6402b810029c1", "hex").length);
    return vouts;
}
exports.addContractVouts = addContractVouts;
function addp2pkhVouts(hash160Address, amounts, neededAmount, hash160PubKey) {
    let vouts = [];
    let networkFee = 0.002;
    let returnAmount = amounts.reduce((a, b) => a + b);
    vouts.push({
        script: p2pkhScript(Buffer.from(hash160Address, "hex")),
        value: new bignumber_js_1.BigNumber(neededAmount).times(1e8).toNumber()
    });
    vouts.push({
        script: p2pkhScript(Buffer.from(hash160PubKey, "hex")),
        value: new bignumber_js_1.BigNumber(returnAmount).minus(neededAmount).minus(networkFee).times(1e8).toNumber()
    });
    return vouts;
}
exports.addp2pkhVouts = addp2pkhVouts;
//# sourceMappingURL=data:application/json;base64,